[
  {
    "objectID": "ERRATA.html",
    "href": "ERRATA.html",
    "title": "Errata",
    "section": "",
    "text": "While presenting at the Research Computing Series for Syracuse University, I illustrated using clustermq for parallelizing jobs but did not correctly demonstrate getting the jobs to run across multiple nodes. The jobs argument to Q() must be set to more than 1."
  },
  {
    "objectID": "ERRATA.html#section",
    "href": "ERRATA.html#section",
    "title": "Errata",
    "section": "",
    "text": "While presenting at the Research Computing Series for Syracuse University, I illustrated using clustermq for parallelizing jobs but did not correctly demonstrate getting the jobs to run across multiple nodes. The jobs argument to Q() must be set to more than 1."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "",
    "section": "about me",
    "text": "about me\n\nsolutions engineer at Posit, PBC\nretired policy wonk\nnot an HPC expert"
  },
  {
    "objectID": "index.html#this-talk-is-a-map",
    "href": "index.html#this-talk-is-a-map",
    "title": "",
    "section": "this talk is a map",
    "text": "this talk is a map\n\nslides github.com/edavidaja/parallelooza\nexample code github.com/edavidaja/iggi\nHPC + cloud development environnments aws parallelcluster + posit workbench"
  },
  {
    "objectID": "index.html#how-to-accelerate-code",
    "href": "index.html#how-to-accelerate-code",
    "title": "",
    "section": "how to accelerate code",
    "text": "how to accelerate code\n\nmake it faster\nadd cores\nadd machines"
  },
  {
    "objectID": "index.html#make-it-faster",
    "href": "index.html#make-it-faster",
    "title": "",
    "section": "make it faster",
    "text": "make it faster\n\nfigure out why it is slow WITH DATA:\n\nprofvis\nbench & alternatives\n\nRIIR\n\nextendr\nr-rust\n\nSIMD\n\nrcppsimdjson"
  },
  {
    "objectID": "index.html#futureverse",
    "href": "index.html#futureverse",
    "title": "",
    "section": "futureverse",
    "text": "futureverse\n{future} overview\n\nhandles tricky parallelization problems\nsupplies primitives for re-use in higher-level pacakges"
  },
  {
    "objectID": "index.html#purrr",
    "href": "index.html#purrr",
    "title": "",
    "section": "purrr::",
    "text": "purrr::\n\nmap(.x, .f, ...) \n\nfor every element of .x,\ndo .f"
  },
  {
    "objectID": "index.html#pfurrr",
    "href": "index.html#pfurrr",
    "title": "",
    "section": "pfurrr::",
    "text": "pfurrr::\n\nfuture_map(.x, .f, ‚Ä¶)\n\nfor every element of .x,\ndo .f,\naccording to the plan()"
  },
  {
    "objectID": "index.html#demo",
    "href": "index.html#demo",
    "title": "",
    "section": "demo",
    "text": "demo\n\nparse_pdf.R"
  },
  {
    "objectID": "index.html#scheduler",
    "href": "index.html#scheduler",
    "title": "",
    "section": "‚Äúscheduler‚Äù:",
    "text": "‚Äúscheduler‚Äù:\nsoftware that matches tasks to available resources:\n\n\norchestrators\n\nkubernetes\nnomad\n\n(not a scheduler)\n\napache spark\n\n\nhpc\n\nslurm\nlsf\npbs\ngrid engine"
  },
  {
    "objectID": "index.html#hpc-1",
    "href": "index.html#hpc-1",
    "title": "",
    "section": "hpc",
    "text": "hpc\n\n\n\n\ngraph LR;\nA(/apps)\nL(login node)\nM(Resource Manager)\nS(Shared Storage)\nH(/home)\n\nL --&gt;|Submit| M;\nM --&gt; C(Compute Node)\nM --&gt; D(Compute Node)\nM --&gt; E(Compute Node)\nS --- L\nS --- M\nS --- C\nS --- D\nS --- E\nA --- S\nH --- S"
  },
  {
    "objectID": "index.html#templates",
    "href": "index.html#templates",
    "title": "",
    "section": "templates",
    "text": "templates\n#!/bin/bash -l\n\n# File: slurm.tmpl\n# Template for using clustermq against a SLURM backend\n\n#SBATCH --job-name={{ job_name }}\n#SBATCH --error={{ log_file | /dev/null }}\n#SBATCH --mem-per-cpu={{ memory | 1024 }}\n#SBATCH --array=1-{{ n_jobs }}\n#SBATCH --cpus-per-task={{ cores | 1 }}\n\n\nexport OMP_NUM_THREADS={{ cores | 1 }}\nCMQ_AUTH={{ auth }} ${R_HOME}/bin/R --no-save --no-restore -e 'clustermq:::worker(\"{{ master }}\")'"
  },
  {
    "objectID": "index.html#future.batchtools",
    "href": "index.html#future.batchtools",
    "title": "",
    "section": "future.batchtools",
    "text": "future.batchtools\nlibrary(future.batchtools)\nlibrary(furrr)\n\nplan(\n  list(\n    batchtools_slurm,\n    multisession\n    )\n  )\n\ntargets %$%\n  future_map2(report, files, ~ iggi::parse_pdf(.x, .y))"
  },
  {
    "objectID": "index.html#clustermq",
    "href": "index.html#clustermq",
    "title": "",
    "section": "clustermq",
    "text": "clustermq\noptions(\n  clustermq.scheduler = \"slurm\",\n  clustermq.template = here::here(\"inst\", \"clustermq.slurm.tmpl\")\n)\n\nlibrary(clustermq)\nlibrary(iggi)\n\nres &lt;- Q(\n  iggi::parse_pdf, \n  report_id = targets$report, file = targets$files, \n  n_jobs = 2,\n  pkgs = c(\"magrittr\", \"pdftools\", \"tesseract\", \"purrr\", \"dplyr\", \"stringr\", \"iggi\")\n  )"
  },
  {
    "objectID": "index.html#crew.cluster",
    "href": "index.html#crew.cluster",
    "title": "",
    "section": "crew.cluster",
    "text": "crew.cluster\nlibrary(crew.cluster)\ncontroller &lt;- crew_controller_slurm(\n  name = \"parse_pdf\",\n  workers = 3L,\n  seconds_idle = 300,\n  slurm_memory_gigabytes_per_cpu = 1,\n  script_lines = paste0(\"export PATH=\",Sys.getenv(\"R_HOME\"),\"/bin:$PATH\"),\n  verbose = TRUE\n)\n\ncontroller$start()\n\nresults &lt;- controller$map(\n  command = iggi::parse_pdf(.x, .y),\n  iterate = list(\n    .x = targets$report,\n    .y = targets$files\n  ),\n  verbose = TRUE\n)\n\nfinaldata &lt;- results$result\n\ncontroller$terminate()"
  },
  {
    "objectID": "index.html#dask-jobqueue",
    "href": "index.html#dask-jobqueue",
    "title": "",
    "section": "dask-jobqueue",
    "text": "dask-jobqueue\nhttps://docs.dask.org/en/stable/deploying-hpc.html"
  },
  {
    "objectID": "index.html#ray",
    "href": "index.html#ray",
    "title": "",
    "section": "ray",
    "text": "ray\nüöß https://docs.ray.io/en/latest/cluster/vms/user-guides/community/slurm.html"
  }
]
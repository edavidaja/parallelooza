---
format:
    revealjs: 
        theme: night
---

# parallelooza

a survey of parallel computing approaches

## [about me](https://edavidaja.com)

- solutions engineer at [Posit, PBC](https://posit.co/)
- retired policy wonk
- not an HPC expert

## this talk is a map

- slides, example code [github.com/edavidaja/parallelooza](https://github.com/edavidaja/parallelooza)
- HPC + cloud development environnments [aws parallelcluster + posit workbench](https://github.com/sol-eng/aws-parallelcluster-rsw)

## how to accelerate code

- make it faster
- add cores
- add machines

## make it faster

- figure out why it is slow **WITH DATA**: 
  - [profvis](https://rstudio.github.io/profvis/)
  - [bench](https://github.com/r-lib/bench?tab=readme-ov-file#alternatives) & alternatives
- RIIR
  - [extendr](https://github.com/extendr/extendr)
  - [r-rust](https://github.com/r-rust/faq)
- SIMD
  - [rcppsimdjson](https://github.com/eddelbuettel/rcppsimdjson)

# add cores {background-color="white"}

::: {.columns}

::: {.column}

![](https://www.futureverse.org/images/logo.png){width="200"}

:::

::: {.column}

![](https://assets.nvidiagrid.net/ngc/logos/Cuda.png)

:::
:::

## futureverse

[{future} overview](https://www.futureverse.org/packages-overview.html)

- handles tricky parallelization problems
- supplies primitives for re-use in higher-level pacakges

## [`purrr::`](https://rstats-wtf.github.io/wtf-purrr-slides/) 

::: r-fit-text
`map(.x, .f, ... )`
:::

for every element of `.x`,  
do `.f`


## [~~p~~`furrr::`](https://furrr.futureverse.org/)

::: r-fit-text
`future_map(.x, .f, ...)`
:::

for every element of `.x`,  
do `.f`,    
according to the `plan()`

## demo

# add machines {background-color="white"}

::: {.columns}
::: {.column}
![](https://slurm.schedmd.com/slurm_logo.png)

:::
::: {.column}
![](https://kubernetes.io/images/nav_logo2.svg)
![](https://htcondor.org/logos/htcondor_logos/PNG/HTCondor_red_blk_notag.png)
:::
:::


## "scheduler":

software that matches tasks to available resources:

::: columns

::: column

### orchestrators

- kubernetes
- nomad

### (not a scheduler)

- apache spark

:::

::: column

### hpc

- slurm 🍊
- condor 🍊
- pbs
- grid engine

:::

:::

## hpc

```{mermaid}
graph LR;
A(/apps)
L(login node)
M(Resource Manager)
S(Shared Storage)
H(/home)

L -->|Submit| M;
M --> C(Compute Node)
M --> D(Compute Node)
M --> E(Compute Node)
S --- L
S --- M
S --- C
S --- D
S --- E
A --- S
H --- S
```

## templates

```{.bash include="R/clustermq.slurm.tmpl"}
```

## [`future.batchtools`](https://future.batchtools.futureverse.org/index.html)

```{.r include="R/future.batchtools.R"}
```

## [`clustermq`](https://mschubert.github.io/clustermq/)

```{.r include="R/clustermq.R"}
```

## [`crew.cluster`](https://wlandau.github.io/crew.cluster/)

```{.r include="R/crew.cluster.R"}
```

# python

## `dask-jobqueue`

https://docs.dask.org/en/stable/deploying-hpc.html

## `ray`

🚧 https://docs.ray.io/en/latest/cluster/vms/user-guides/community/slurm.html


# questions? feedback?

`david@posit.co`

